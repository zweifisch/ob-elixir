* ob-elixir

** setup

To use =ob-elixir= in an =org-babel= source block, the elixir language
must be enabled in the custom =org-babel-load-languages=
alist. Alternatively, running the following snippet during
initialization will enable the mode.

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (elixir . t)))
#+END_SRC

** supported header arguments

- cookie
- name
- remsh
- sname
- session

** using external packages
If one wants to use a [[https://hexdocs.pm/][hex]] package using with [[https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html][mix]], one should add =mix.exs= in the same directory as the org file and then run =mix deps.get= before executing any code block. If the repl has already started, one might need to restart it after adding some new package.

** examples
   
*** connect to remote shell

: #+BEGIN_SRC elixir :remsh name@node :sname console
: Node.self
: #+END_SRC
: 
: #+RESULTS:
: : :name@node

*** mix.exs

Optional =mix.exs= file to allow using hex libraries

#+begin_src elixir :exports both :results output 
  defmodule ObElixir.MixProject do
    use Mix.Project

    def project do
      [
        app: :ob_elixir,
        version: "0.1.0",
        elixir: "~> 1.13",
        start_permanent: Mix.env() == :prod,
        deps: deps()
      ]
    end

    # Run "mix help compile.app" to learn about applications.
    def application do
      [
        extra_applications: [:logger]
      ]
    end

    defp deps do
      [
        {:your_package, "== 0.0.1"}
      ]
    end
  end
#+end_src
